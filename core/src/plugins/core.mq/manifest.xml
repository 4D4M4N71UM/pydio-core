<?xml version="1.0" encoding="UTF-8"?>
<ajxp_plugin label="CONF_MESSAGE[Message Queuing]" description="CONF_MESSAGE[MQ Abstraction for dynamic dispatching]" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:noNamespaceSchemaLocation="file:../core.ajaxplorer/ajxp_registry.xsd">
    <client_settings>
        <resources>
            <i18n namespace="core.mq" path="plugins/core.mq/i18n"/>
            <js className="PydioInstantMessenger" file="plugins/core.mq/class.PydioInstantMessenger.js"/>
        </resources>
    </client_settings>
    <server_settings>
        <global_param group="CONF_MESSAGE[Inner Messaging]" type="plugin_instance:mq" name="UNIQUE_MS_INSTANCE" label="CONF_MESSAGE[MQ Instance]" description="CONF_MESSAGE[Choose the plugin]" mandatory="false" default="mq.serial"/>
        <global_param group="CONF_MESSAGE[Inner Messaging]" description="CONF_MESSAGE[Post the notification in a temporary queue. You must set up the scheduler accordingly to make sure the queue is then consumed on a regularly basis.]" label="CONF_MESSAGE[Queue notifications]" name="USE_QUEUE" type="boolean" default="false"/>

        <global_param group="CONF_MESSAGE[Caddy]" type="monitor" name="CADDYFILE_VALID" choices="run_plugin_action:core.mq:getCaddyFile" label="CONF_MESSAGE[Caddyfile Format]" description="CONF_MESSAGE[Caddyfile format is valid ?]" mandatory="false"/>
        <global_param group="CONF_MESSAGE[Caddy]" type="monitor" name="CADDY_STATUS" choices="run_plugin_action:core.mq:getCaddyStatus" label="CONF_MESSAGE[Caddy Status]" description="CONF_MESSAGE[Caddyfile is running ?]" mandatory="false"/>

        <global_param group="CONF_MESSAGE[Caddy]" type="button" name="CADDY_SWITCH_ON" choices="run_plugin_action:core.mq:switchCaddyOn" label="CONF_MESSAGE[Start Caddy]" description="CONF_MESSAGE[Switch Caddy ON]" mandatory="false"/>
        <global_param group="CONF_MESSAGE[Caddy]" type="button" name="CADDY_SWITCH_OFF" choices="run_plugin_action:core.mq:switchCaddyOff" label="CONF_MESSAGE[Stop Caddy]" description="CONF_MESSAGE[Switch Caddy OFF]" mandatory="false"/>

        <global_param group="CONF_MESSAGE[WebSocket]" description="CONF_MESSAGE[WebSocket server is running]" label="CONF_MESSAGE[WebSocket]" name="WS_ACTIVE" type="boolean" expose="true"/>

        <global_param group="CONF_MESSAGE[WebSocket Server]" description="CONF_MESSAGE[WebSocket host]" label="CONF_MESSAGE[WS Hostname]" name="WS_HOST" type="string" expose="true" default="localhost"/>
        <global_param group="CONF_MESSAGE[WebSocket Server]" description="CONF_MESSAGE[WebSocket port]" label="CONF_MESSAGE[WS Port]" name="WS_PORT" type="string" expose="true" default="8090"/>
        <global_param group="CONF_MESSAGE[WebSocket Server]" description="CONF_MESSAGE[WebSocket secure]" label="CONF_MESSAGE[WS Client SSL]" name="WS_SECURE" type="boolean" expose="true" default="false"/>
        <global_param group="CONF_MESSAGE[WebSocket Server]" description="CONF_MESSAGE[WebSocket path]" label="CONF_MESSAGE[WS Path]" name="WS_PATH" type="string" expose="true" default="ws"/>
        <global_param group="CONF_MESSAGE[WebSocket Server]" description="CONF_MESSAGE[WebSocket Authentication Key]" label="CONF_MESSAGE[WS Admin Key]" name="WS_SERVER_ADMIN" type="string" default="adminsecretkey"/>

        <global_param group="CONF_MESSAGE[Upload]" description="CONF_MESSAGE[Upload server is running]" label="CONF_MESSAGE[Upload]" name="UPLOAD_ACTIVE" type="boolean" expose="true"/>

        <global_param group="CONF_MESSAGE[Upload Server]" description="CONF_MESSAGE[Upload Server host]" label="CONF_MESSAGE[Upload Server host]" name="UPLOAD_HOST" type="string" expose="true" default="localhost"/>
        <global_param group="CONF_MESSAGE[Upload Server]" description="CONF_MESSAGE[Upload Server port]" label="CONF_MESSAGE[Upload Server port]" name="UPLOAD_PORT" type="string" expose="true" default="8090"/>
        <global_param group="CONF_MESSAGE[Upload Server]" description="CONF_MESSAGE[Upload Server secure]" label="CONF_MESSAGE[Upload Server secure]" name="UPLOAD_SECURE" type="boolean" expose="true" default="false"/>
        <global_param group="CONF_MESSAGE[Upload Server]" description="CONF_MESSAGE[Upload Server path]" label="CONF_MESSAGE[Upload Server path]" name="UPLOAD_PATH" type="string" expose="true" default="io"/>

        <global_param group="CONF_MESSAGE[NSQ Messaging]" description="CONF_MESSAGE[NSQ Host]" label="CONF_MESSAGE[NSQ Host]" name="NSQ_HOST" type="string" expose="true" default="localhost" />
        <global_param group="CONF_MESSAGE[NSQ Messaging]" description="CONF_MESSAGE[NSQ Port]" label="CONF_MESSAGE[NSQ Port]" name="NSQ_PORT" type="string" expose="true" default="4150"/>

        <global_param group="CONF_MESSAGE[Workers]" type="boolean" name="MQ_USE_WORKERS" label="CONF_MESSAGE[Use Workers]" description="CONF_MESSAGE[Send commands in background to workers waiting to execute them]" mandatory="false" default="false"/>
        <global_param group="CONF_MESSAGE[Workers]" type="monitor" name="MQ_WORKER_STATUS" choices="run_plugin_action:core.mq:getWorkerStatus" label="CONF_MESSAGE[Worker Status]" description="CONF_MESSAGE[Try to detect if the worker is responding]" mandatory="false"/>
        <global_param group="CONF_MESSAGE[Workers]" type="button" name="MQ_WORKER_SWITCH_ON" choices="run_plugin_action:core.mq:switchWorkerOn" label="CONF_MESSAGE[Start Worker]" description="CONF_MESSAGE[Switch a worker ON]" mandatory="false"/>
        <global_param group="CONF_MESSAGE[Workers]" type="button" name="MQ_WORKER_SWITCH_OFF" choices="run_plugin_action:core.mq:switchWorkerOff" label="CONF_MESSAGE[Stop Worker]" description="CONF_MESSAGE[Switch a worker OFF]" mandatory="false"/>
    </server_settings>
    <class_definition classname="Pydio\Mq\Core\MqManager" filename="plugins/core.mq/MqManager.php"/>
    <registry_contributions>
        <actions>
            <action name="consume_notification_queue">
                <rightsContext adminOnly="false" noUser="true" read="false" userLogged="true" write="false"/>
                <processing>
                    <serverCallback methodName="consumeQueue"/>
                </processing>
            </action>
            <action name="client_register_channel">
                <rightsContext adminOnly="false" noUser="true" read="false" userLogged="true" write="false"/>
                <processing>
                    <clientListener name="init"><![CDATA[
                        if(!pydio.mqObserver && !pydio.mqObserverLoading && !window.ajxpMinisite){
                            pydio.mqObserverLoading = true;
                            ResourcesManager.prototype.loadJSResource('plugins/core.mq/class.PydioInstantMessenger.js', 'PydioInstantMessenger', function(){
                                pydio.mqObserver = new PydioInstantMessenger();
                            }, true);
                        }
                    ]]></clientListener>
                    <serverCallback methodName="clientChannelMethod" restParams="/channel/client_id" developerComment="Subscribe to given queue of events.">
                        <input_param name="channel" type="string" description="Channel to connect to"/>
                        <input_param name="client_id" type="string"
                                     description="A unique identifier for the client connecting"/>
                    </serverCallback>
                </processing>
            </action>
            <action name="client_unregister_channel">
                <rightsContext adminOnly="false" noUser="true" read="false" userLogged="true" write="false"/>
                <processing>
                    <serverCallback methodName="clientChannelMethod" restParams="/channel/client_id" developerComment="Subscribe to given queue of events.">
                        <input_param name="channel" type="string" description="Channel to connect to"/>
                        <input_param name="client_id" type="string"
                                     description="A unique identifier for the client connecting"/>
                    </serverCallback>
                </processing>
            </action>
            <action name="client_consume_channel">
                <rightsContext adminOnly="false" noUser="true" read="false" userLogged="true" write="false"/>
                <processing>
                    <serverCallback methodName="clientChannelMethod" restParams="/channel/client_id" developerComment="Subscribe to given queue of events.">
                        <input_param name="channel" type="string" description="Channel to connect to"/>
                        <input_param name="client_id" type="string"
                                     description="A unique identifier for the client connecting"/>
                    </serverCallback>
                </processing>
            </action>
            <action name="ws_authenticate" skipSecureToken="true">
                <processing>
                    <serverCallback restParams="/" methodName="wsAuthenticate"/>
                </processing>
            </action>
        </actions>
        <hooks>
            <serverCallback methodName="publishNodeChange" hookName="node.change" defer="true"/>
            <serverCallback methodName="sendInstantMessage" hookName="msg.instant" />
            <serverCallback methodName="sendTaskMessage" hookName="msg.task" defer="true" dontBreakOnException="true"/>
            <serverCallback methodName="sendToQueue" hookName="msg.queue_notification" />
            <serverCallback methodName="appendRefreshInstruction" hookName="response.send" dontBreakOnException="true"/>
        </hooks>
    </registry_contributions>
    <dependencies>
        <activePlugin pluginName="core.notifications"/>
    </dependencies>
</ajxp_plugin>
